package ProyectoFinalVista;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyectofinal.Entidades.PropiedadInmueble;
import proyectofinal.accesoADatos.Conexion;
import proyectofinal.accesoADatos.PropiedadInmuebleData;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author MCali
 */
public class PropiedadInmuebleVista extends javax.swing.JInternalFrame {

    /*   */
    private Connection con= null;
    private DefaultTableModel modelo= new DefaultTableModel();
    private PropiedadInmuebleData piD= new PropiedadInmuebleData();
    private final String[] columnas = {"Indice", "Dato"};
    /*   */
    

    public PropiedadInmuebleVista() {
        initComponents();
        con= Conexion.getConexion();
        cargarTabla();
        mostrarDatosPropiedadInmueble();  
       
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Grupo1 = new javax.swing.ButtonGroup();
        Grupo2 = new javax.swing.ButtonGroup();
        backG = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnAgregarInmueble = new javax.swing.JButton();
        btnModificarInmueble = new javax.swing.JButton();
        btnEliminarInmueble = new javax.swing.JButton();
        btnAlquilarInmueble = new javax.swing.JButton();
        btnActualizarPrecio = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        rbInmDisponible = new javax.swing.JRadioButton();
        rbInmAlquilado = new javax.swing.JRadioButton();
        rbCasa = new javax.swing.JRadioButton();
        rbTerreno = new javax.swing.JRadioButton();
        rbLocalComercial = new javax.swing.JRadioButton();
        rbGalpon = new javax.swing.JRadioButton();
        rbGarage = new javax.swing.JRadioButton();
        btnFiltrar = new javax.swing.JButton();
        lbTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInmuebles = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Gestion de Inmuebles");
        setPreferredSize(new java.awt.Dimension(1000, 600));

        backG.setBackground(new java.awt.Color(255, 255, 255));
        backG.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(300, 570));

        btnAgregarInmueble.setText("Agregar");
        btnAgregarInmueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarInmuebleActionPerformed(evt);
            }
        });

        btnModificarInmueble.setText("Modificar");
        btnModificarInmueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarInmuebleActionPerformed(evt);
            }
        });

        btnEliminarInmueble.setText("Eliminar");
        btnEliminarInmueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarInmuebleActionPerformed(evt);
            }
        });

        btnAlquilarInmueble.setText("Alquilar");
        btnAlquilarInmueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlquilarInmuebleActionPerformed(evt);
            }
        });

        btnActualizarPrecio.setText("Actualizar Precio");
        btnActualizarPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarPrecioActionPerformed(evt);
            }
        });

        Grupo1.add(rbInmDisponible);
        rbInmDisponible.setText("Inmueble Disponible");
        rbInmDisponible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbInmDisponibleActionPerformed(evt);
            }
        });

        Grupo1.add(rbInmAlquilado);
        rbInmAlquilado.setText("Inmuebles Alquilado");
        rbInmAlquilado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbInmAlquiladoActionPerformed(evt);
            }
        });

        Grupo2.add(rbCasa);
        rbCasa.setText("Casa");

        Grupo2.add(rbTerreno);
        rbTerreno.setText("Terreno");

        Grupo2.add(rbLocalComercial);
        rbLocalComercial.setText("Local Comercial");

        Grupo2.add(rbGalpon);
        rbGalpon.setText("Galpon");

        Grupo2.add(rbGarage);
        rbGarage.setText("Garage");

        btnFiltrar.setText("Filtrar");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbGarage)
                    .addComponent(rbGalpon)
                    .addComponent(rbLocalComercial)
                    .addComponent(rbTerreno)
                    .addComponent(rbCasa)
                    .addComponent(rbInmAlquilado)
                    .addComponent(rbInmDisponible)
                    .addComponent(btnEliminarInmueble)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnModificarInmueble)
                            .addComponent(btnAgregarInmueble))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAlquilarInmueble)
                            .addComponent(btnActualizarPrecio)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnFiltrar)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarInmueble)
                    .addComponent(btnAlquilarInmueble))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModificarInmueble)
                    .addComponent(btnActualizarPrecio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEliminarInmueble)
                .addGap(11, 11, 11)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbInmDisponible)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbInmAlquilado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbCasa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbTerreno)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbLocalComercial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbGalpon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbGarage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFiltrar)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        backG.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 270, 570));

        lbTitulo.setText("Propiedades");
        backG.add(lbTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 30, -1, -1));

        tablaInmuebles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Accesibilidad", "Caracteristicas", "Direccion", "Precio", "Superficie", "Tipo", "Zona"
            }
        ));
        jScrollPane1.setViewportView(tablaInmuebles);
        if (tablaInmuebles.getColumnModel().getColumnCount() > 0) {
            tablaInmuebles.getColumnModel().getColumn(0).setResizable(false);
            tablaInmuebles.getColumnModel().getColumn(0).setPreferredWidth(20);
            tablaInmuebles.getColumnModel().getColumn(1).setResizable(false);
            tablaInmuebles.getColumnModel().getColumn(2).setResizable(false);
            tablaInmuebles.getColumnModel().getColumn(3).setResizable(false);
            tablaInmuebles.getColumnModel().getColumn(4).setResizable(false);
            tablaInmuebles.getColumnModel().getColumn(5).setResizable(false);
            tablaInmuebles.getColumnModel().getColumn(6).setResizable(false);
            tablaInmuebles.getColumnModel().getColumn(7).setResizable(false);
        }

        backG.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 690, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void btnAgregarInmuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarInmuebleActionPerformed
        // TODO add your handling code here:
        setVisible(true);
    
        // Muestra la nueva ventana
        NuevoPropiedadInmueble nombre = new NuevoPropiedadInmueble();   
        JDesktopPane desktopPane = getDesktopPane(); 
        desktopPane.add(nombre);
        nombre.setVisible(true);
    }//GEN-LAST:event_btnAgregarInmuebleActionPerformed

    private void btnAlquilarInmuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlquilarInmuebleActionPerformed
        
        if(tablaInmuebles.getSelectedRow()!= -1){
            Integer idInmueble = (Integer) modelo.getValueAt(tablaInmuebles.getSelectedRow(), 0);
            System.out.println(idInmueble);
            
            int idIn= idInmueble ;
       
            PropiedadInmuebleData PID = new PropiedadInmuebleData();
       
            PropiedadInmueble pid = PID.buscarPropInmuebleLibre(idIn);
            
            System.out.println(pid);
            
             setVisible(true);
    
            // Muestra la nueva ventana
            AlquilarInmueble nombre = new AlquilarInmueble(pid);   
            JDesktopPane desktopPane = getDesktopPane(); 
            desktopPane.add(nombre);
            nombre.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione Inmueble de tabla");
        }
        
    }//GEN-LAST:event_btnAlquilarInmuebleActionPerformed

    private void rbInmDisponibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbInmDisponibleActionPerformed
        // TODO add your handling code here:
        
        if (rbInmDisponible.isSelected()){
            borrarFilas();
            lbTitulo.setText("Lista de propiedades Disponibles");
            PropiedadInmuebleData id1= new PropiedadInmuebleData();
            for(PropiedadInmueble prop:id1.obtenerLasPropiedadeslibres()){                  
                System.out.println(prop);
                modelo.addRow(new Object []{prop.getID_Local(), prop.getAccesibilidad(),prop.getCaracteristicas(), prop.getDireccion(),prop.getPrecioTazado(),prop.getSuperficieMinima(),prop.getTipoLocal(),prop.getZona()});
            //modelo.addRow(new Object []{2, "xx","ww", "ss",12000,20,"ee","q"});
            }
        } 
    }//GEN-LAST:event_rbInmDisponibleActionPerformed

    private void rbInmAlquiladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbInmAlquiladoActionPerformed
        // TODO add your handling code here:
        if(rbInmAlquilado.isSelected()){
            borrarFilas();
            lbTitulo.setText("Lista de propiedades Alquiladas");
            PropiedadInmuebleData id2= new PropiedadInmuebleData();
            for(PropiedadInmueble prop:id2.obtenerLasPropiedadesOcupadas()){                  
                System.out.println(prop);
                modelo.addRow(new Object []{prop.getID_Local(), prop.getAccesibilidad(),prop.getCaracteristicas(), prop.getDireccion(),prop.getPrecioTazado(),prop.getSuperficieMinima(),prop.getTipoLocal(),prop.getZona()});
            //modelo.addRow(new Object []{2, "xx","ww", "ss",12000,20,"ee","q"});
            }
        }
    }//GEN-LAST:event_rbInmAlquiladoActionPerformed

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
        // TODO add your handling code here:
        if (rbCasa.isSelected()) {
            borrarFilas();
            lbTitulo.setText("Lista completa de propiedades");
            PropiedadInmuebleData id= new PropiedadInmuebleData();
            for(PropiedadInmueble prop:id.obtenerLasPropiedadesTipoCasa("Casa")){                  
                System.out.println(prop);
                modelo.addRow(new Object []{prop.getID_Local(), prop.getAccesibilidad(),prop.getCaracteristicas(), prop.getDireccion(),prop.getPrecioTazado(),prop.getSuperficieMinima(),prop.getTipoLocal(),prop.getZona()});
                //modelo.addRow(new Object []{2, "xx","ww", "ss",12000,20,"ee","q"});

            }
        }else if (rbTerreno.isSelected()) {
            borrarFilas();
            lbTitulo.setText("Lista completa de propiedades");
            PropiedadInmuebleData id= new PropiedadInmuebleData();
            for(PropiedadInmueble prop:id.obtenerLasPropiedadesTipoTerreno("Terreno")){                  
                System.out.println(prop);
                modelo.addRow(new Object []{prop.getID_Local(), prop.getAccesibilidad(),prop.getCaracteristicas(), prop.getDireccion(),prop.getPrecioTazado(),prop.getSuperficieMinima(),prop.getTipoLocal(),prop.getZona()});
                //modelo.addRow(new Object []{2, "xx","ww", "ss",12000,20,"ee","q"});

            }
        }else if (rbLocalComercial.isSelected()) {
             borrarFilas();
            lbTitulo.setText("Lista completa de propiedades");
            PropiedadInmuebleData id= new PropiedadInmuebleData();
            for(PropiedadInmueble prop:id.obtenerLasPropiedadesTipoLC("Local Comercial")){                  
                System.out.println(prop);
                modelo.addRow(new Object []{prop.getID_Local(), prop.getAccesibilidad(),prop.getCaracteristicas(), prop.getDireccion(),prop.getPrecioTazado(),prop.getSuperficieMinima(),prop.getTipoLocal(),prop.getZona()});
                //modelo.addRow(new Object []{2, "xx","ww", "ss",12000,20,"ee","q"});

            }
        }else if (rbGalpon.isSelected()) {
            borrarFilas();
            lbTitulo.setText("Lista completa de propiedades");
            PropiedadInmuebleData id= new PropiedadInmuebleData();
            for(PropiedadInmueble prop:id.obtenerLasPropiedadesTipoGalpon("Galpon")){                  
                System.out.println(prop);
                modelo.addRow(new Object []{prop.getID_Local(), prop.getAccesibilidad(),prop.getCaracteristicas(), prop.getDireccion(),prop.getPrecioTazado(),prop.getSuperficieMinima(),prop.getTipoLocal(),prop.getZona()});
                //modelo.addRow(new Object []{2, "xx","ww", "ss",12000,20,"ee","q"});

            }
        }else if (rbGarage.isSelected()) {
            borrarFilas();
            lbTitulo.setText("Lista completa de propiedades");
            PropiedadInmuebleData id= new PropiedadInmuebleData();
            for(PropiedadInmueble prop:id.obtenerLasPropiedadesTipoGarage("garage")){                  
                System.out.println(prop);
                modelo.addRow(new Object []{prop.getID_Local(), prop.getAccesibilidad(),prop.getCaracteristicas(), prop.getDireccion(),prop.getPrecioTazado(),prop.getSuperficieMinima(),prop.getTipoLocal(),prop.getZona()});
                //modelo.addRow(new Object []{2, "xx","ww", "ss",12000,20,"ee","q"});

            }
        }
        
    }//GEN-LAST:event_btnFiltrarActionPerformed

    private void btnModificarInmuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarInmuebleActionPerformed
        // TODO add your handling code here:
        if(tablaInmuebles.getSelectedRow()!= -1){
            Integer idInmueble = (Integer) modelo.getValueAt(tablaInmuebles.getSelectedRow(), 0);
            System.out.println(idInmueble);
            
            int idIn= idInmueble ;
       
            PropiedadInmuebleData PID = new PropiedadInmuebleData();
            PropiedadInmueble pid = PID.buscarPropInmueble(idIn);
            
            
//            if (pid.getOcupante()==null){
//                PropiedadInmueble pid2 = PID.buscarPropInmuebleLibre(idIn);
//            
//            }
            System.out.println("id de inm: "+idInmueble+"para modificar"+pid);
            
             setVisible(true);
    
            // Muestra la nueva ventana
            ModificarInmueble nombre = new ModificarInmueble(pid);   
            JDesktopPane desktopPane = getDesktopPane(); 
            desktopPane.add(nombre);
            nombre.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione Inmueble de tabla");
        }
    }//GEN-LAST:event_btnModificarInmuebleActionPerformed

    private void btnEliminarInmuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarInmuebleActionPerformed
        // TODO add your handling code here:
         if(tablaInmuebles.getSelectedRow()!= -1){
            Integer idInmueble = (Integer) modelo.getValueAt(tablaInmuebles.getSelectedRow(), 0);
            System.out.println(idInmueble);
            
            int idIn= idInmueble ;
       
            
            int resp = JOptionPane.showConfirmDialog(this, "Estás seguro que quieres dar de Baja a esta propiedad?", "Dar de Baja", JOptionPane.YES_NO_OPTION);
            if (resp == JOptionPane.YES_OPTION){
              piD.EliminarPropiedadInmueble(idIn);
            
            }
            
             setVisible(true);
    
            // Muestra la nueva ventana
           }else{
            JOptionPane.showMessageDialog(null, "Seleccione Inmueble de tabla");
        }
    }//GEN-LAST:event_btnEliminarInmuebleActionPerformed

    private void btnActualizarPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarPrecioActionPerformed
        // TODO add your handling code here:
         if(tablaInmuebles.getSelectedRow()!= -1){
            Integer idInmueble = (Integer) modelo.getValueAt(tablaInmuebles.getSelectedRow(), 0);
            System.out.println(idInmueble);
            
            int idIn= idInmueble ;
       
            PropiedadInmuebleData PID = new PropiedadInmuebleData();
            PropiedadInmueble pid = PID.buscarPropInmueble(idIn);
            
           // JOptionPane.
//            if (pid.getOcupante()==null){
//                PropiedadInmueble pid2 = PID.buscarPropInmuebleLibre(idIn);
//            
//            }
            System.out.println("id de inm: "+idInmueble+"para modificar PRECIO"+pid);
            
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione Inmueble de tabla");
        }
    }//GEN-LAST:event_btnActualizarPrecioActionPerformed
/**/
    private void mostrarDatosPropiedadInmueble(){
        
        borrarFilas();
        lbTitulo.setText("Lista completa de propiedades");
        PropiedadInmuebleData id= new PropiedadInmuebleData();
        for(PropiedadInmueble prop:id.obtenerLasPropiedadesActivas()){                  
            System.out.println(prop);
            modelo.addRow(new Object []{prop.getID_Local(), prop.getAccesibilidad(),prop.getCaracteristicas(), prop.getDireccion(),prop.getPrecioTazado(),prop.getSuperficieMinima(),prop.getTipoLocal(),prop.getZona()});
            //modelo.addRow(new Object []{2, "xx","ww", "ss",12000,20,"ee","q"});
        }
    }
    
    private void borrarFilas() {
        int f = tablaInmuebles.getRowCount() - 1;
        for (; f >= 0; f--) {
            modelo.removeRow(f);
        }
    }
    
    public void cargarTabla() {

        modelo.addColumn("Id");
        modelo.addColumn("Acceso");
        modelo.addColumn("Caracteristicas");
        modelo.addColumn("Direccion");
        modelo.addColumn("Precio");
        modelo.addColumn("Superficie");
        modelo.addColumn("Tipo");
        modelo.addColumn("Zona");

        tablaInmuebles.setModel(modelo);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Grupo1;
    private javax.swing.ButtonGroup Grupo2;
    private javax.swing.JPanel backG;
    private javax.swing.JButton btnActualizarPrecio;
    private javax.swing.JButton btnAgregarInmueble;
    private javax.swing.JButton btnAlquilarInmueble;
    private javax.swing.JButton btnEliminarInmueble;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JButton btnModificarInmueble;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JRadioButton rbCasa;
    private javax.swing.JRadioButton rbGalpon;
    private javax.swing.JRadioButton rbGarage;
    private javax.swing.JRadioButton rbInmAlquilado;
    private javax.swing.JRadioButton rbInmDisponible;
    private javax.swing.JRadioButton rbLocalComercial;
    private javax.swing.JRadioButton rbTerreno;
    private javax.swing.JTable tablaInmuebles;
    // End of variables declaration//GEN-END:variables
}
